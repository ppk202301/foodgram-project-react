# Generated by Django 4.2.1 on 2023-10-23 18:47

import colorfield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Cart',
                'verbose_name_plural': 'Carts',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Favorite',
                'verbose_name_plural': 'Favorites',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Could not be empty.', max_length=250, verbose_name='ingredient name')),
                ('measurement_unit', models.CharField(help_text='Could not be empty.', max_length=30, verbose_name='ingredient unit')),
            ],
            options={
                'verbose_name': 'Ingredient',
                'verbose_name_plural': 'Ingredients',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IngredientRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0.001, help_text='Ingredient amount in the recipe (min 0.001).', validators=[django.core.validators.MinValueValidator(0.001, 'Min value should be more than 0.001.')], verbose_name='quantity')),
                ('ingredient', models.ForeignKey(help_text='One of recipe ingredients.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='recipes.ingredient', verbose_name='Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name your recipe.', max_length=250, unique=True, verbose_name='Recipe title')),
                ('image', models.ImageField(help_text='Show the final result.', upload_to='recipes/image', verbose_name='Recipe image')),
                ('text', models.TextField(blank=True, help_text='Describe your recipe.', max_length=250, verbose_name='Description')),
                ('cooking_time', models.PositiveIntegerField(default=5, help_text='Estimate approximate production time in minutes (min 5).', validators=[django.core.validators.MinValueValidator(5, 'Production time should be more than 5 min.')], verbose_name='Recipe production time')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Date of publication')),
                ('author', models.ForeignKey(help_text='Point the recipe author.', on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('ingredients', models.ManyToManyField(help_text='Add all components to your dish.', related_name='recipes', through='recipes.IngredientRecipe', to='recipes.ingredient', verbose_name='Recipe ingregiemts')),
            ],
            options={
                'verbose_name': 'Recipe',
                'verbose_name_plural': 'Recipes',
                'ordering': ['-pub_date'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Could not be empty. Must be unique.', max_length=250, unique=True, verbose_name='Tag name')),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', help_text='Could not be empty. Must be unique.', image_field=None, max_length=7, samples=None, unique=True, verbose_name='Tag color HEX code.')),
                ('slug', models.SlugField(help_text='Could not be empty. Must be unique.', max_length=250, unique=True, verbose_name='Tag slag.')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RecipeTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reg_date', models.DateTimeField(auto_now_add=True, verbose_name='Date of registration')),
                ('recipe', models.ForeignKey(help_text='One of recipes.', on_delete=django.db.models.deletion.CASCADE, related_name='recipes_tags', to='recipes.recipe', verbose_name='Recipe')),
                ('tag', models.ForeignKey(help_text='One of recipe tags.', on_delete=django.db.models.deletion.CASCADE, related_name='tags_recipes', to='recipes.tag', verbose_name='Tag')),
            ],
            options={
                'ordering': ['-reg_date'],
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(help_text='Add all tags to your recipe.', through='recipes.RecipeTag', to='recipes.tag', verbose_name='Recipe tags'),
        ),
        migrations.AddField(
            model_name='ingredientrecipe',
            name='recipe',
            field=models.ForeignKey(help_text='Ingredient is a part of this recipe.', on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='recipes.recipe', verbose_name='Recipe'),
        ),
        migrations.AddConstraint(
            model_name='ingredient',
            constraint=models.UniqueConstraint(fields=('name', 'measurement_unit'), name='unique_ingredient_unit'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='recipe',
            field=models.ForeignKey(help_text='Point a favorite recipe.', on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='recipes.recipe', verbose_name='Favorite recipe'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='user',
            field=models.ForeignKey(help_text='Point the recipe fan.', on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL, verbose_name='User who has the favorite recipe'),
        ),
        migrations.AddField(
            model_name='cart',
            name='recipe',
            field=models.ForeignKey(help_text='Point the ordered recipe.', on_delete=django.db.models.deletion.CASCADE, related_name='carts', to='recipes.recipe', verbose_name='Recipe in the cart'),
        ),
        migrations.AddField(
            model_name='cart',
            name='user',
            field=models.ForeignKey(help_text='Point the buyer.', on_delete=django.db.models.deletion.CASCADE, related_name='buyers', to=settings.AUTH_USER_MODEL, verbose_name='Buyer'),
        ),
        migrations.AddConstraint(
            model_name='recipetag',
            constraint=models.UniqueConstraint(fields=('recipe', 'tag'), name='no _duplicated_tags_for_recipe'),
        ),
        migrations.AddConstraint(
            model_name='ingredientrecipe',
            constraint=models.UniqueConstraint(fields=('recipe', 'ingredient'), name='no_duplicated_ingredients_in_recipe'),
        ),
        migrations.AddConstraint(
            model_name='favorite',
            constraint=models.UniqueConstraint(fields=('recipe', 'user'), name='no_dublicated_favorite_pairs'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.UniqueConstraint(fields=('recipe', 'user'), name='no_dublicated_recipes_in_cart'),
        ),
    ]

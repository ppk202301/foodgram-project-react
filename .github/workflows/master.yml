name: Main Foodgram workflow

on:
  push:
    branches:
      - master

jobs:
  tests:
    name: PEP8 check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8 pep8-naming flake8-broken-line flake8-return
      - name: Test with flake8
        run: |
          python -m flake8

  build_and_push_to_docker_hub:
    name: Build and push Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Backend. Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
      - name: Frontend. Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
      - name: Gateway. Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./gateway
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/gateway:latest
      - name: Database postgres. Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./database
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/postgres:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd foodgram/
            sudo docker-compose -f docker-compose.production.yml stop
            sudo docker system prune -af
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/gateway:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/postgres:latest
            rm .env
            touch .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose exec -T foodgram-backend cd cookbook/
            sudo docker compose exec -T foodgram-backend touch .env
            sudo docker compose exec -T foodgram-backend echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            sudo docker compose exec -T foodgram-backend echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            sudo docker compose exec -T foodgram-backend echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            sudo docker compose exec -T foodgram-backend echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            sudo docker compose exec -T foodgram-backend echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose exec -T foodgram-backend echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            sudo docker compose exec -T foodgram-backend echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            sudo docker compose exec -T foodgram-backend echo DEBUG=${{ secrets.DEBUG }} >> .env
            sudo docker compose restart foodgram-backend
            sudo docker compose exec -T foodgram-backend python manage.py makemigrations
            sudo docker compose exec -T foodgram-backend python manage.py migrate
            sudo docker compose exec -T foodgram-backend python manage.py collectstatic --noinput
            sudo docker compose exec -T foodgram-backend cd collected_static/
            sudo docker compose exec -T foodgram-backend cp -r .  /static_backend/
            sudo docker compose exec -T foodgram-backend cd ..
            sudo docker compose exec -T foodgram-backend python manage.py import_ingredients_data
